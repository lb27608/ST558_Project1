[
  {
    "objectID": "558_Project_1.html",
    "href": "558_Project_1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "In this project, we’ll be creating functions to retrieve data from the US Census Public Use Microdata Sample (PUMS), manipulate that data into a tidy tibble, and then perform a few basic summary analyses."
  },
  {
    "objectID": "558_Project_1.html#get-pums-data-from-census-api-for-a-single-year",
    "href": "558_Project_1.html#get-pums-data-from-census-api-for-a-single-year",
    "title": "ST 558 Project 1",
    "section": "Get PUMS data from Census API for a single year",
    "text": "Get PUMS data from Census API for a single year\nWe created an additional helper function to allow us to format any character variables we retrieve from the API. The character variables have a numeric value that corresponds to a character string. This helper function changes the numeric values into the corresponding character string for each character variable.\n\n  frmt_char_var&lt;-function(y='all'){\n  first_url&lt;-\"https://api.census.gov/data/2022/acs/acs1/pums/variables/\"\n  end_url&lt;-\".json\"\n  var&lt;-y\n  cmplt_url&lt;-paste0(first_url,var,end_url)\n  t &lt;- httr::GET(cmplt_url)\n  t_list &lt;- t$content |&gt; rawToChar() |&gt;jsonlite::fromJSON()\n  var_list &lt;- t_list$values$item\n  x&lt;-as_tibble(var_list)\n  x2&lt;-pivot_longer(x,cols = 1:ncol(x))\n}\n\nThis is our main function for getting PUMS data from the Census API. The function builds a URL based on the year given, the numeric variables given, the character variables given, and the optional geography given. The data is organized as a tibble using our first helper function, cens_tibble. The function then formats the variables, numeric when appropriate, time when appropriate, and using the second helper function, frmt_char_var, when appropriate.\nThe function requires a year, a numeric varaible, and a character variable to run. The function has no defualt year, but the function will return PWGTP always unless otherwise specified. AGEP is the defualt numeric variable, and SEX is the default character variable. A user can call as many of the optional variables as they would like.\nThe default geography is set to state with the state code of 6. The geography can be changed to division, region, or all. Like state, division and region can have codes specified, but it is not required and all will be returned if left unspecified.\n\nget_PUMS_API&lt;-function(yr, AGEP=TRUE, GASP=FALSE, GRPIP=FALSE, JWAP=FALSE ,JWDP=FALSE, \n                       JWMNP=FALSE ,FER=FALSE ,HHL=FALSE, HISPEED=FALSE, JWTRNS=FALSE, \n                       SCH=FALSE, SCHL=FALSE, SEX=TRUE, geography='state', geo_code=06)\n  {\n  \n  # The first part of this function builds the URL that will be used to contact the API\n    # The year is checked to be in the correct range\n    # The input is checked for variables specified\n    # The input is checked for at least one numric variable and at least one character variable\n    # The geography component is checked\n  \n  base_url&lt;-\"https://api.census.gov/data/\"\n  if(yr&gt;=2010 & yr&lt;=2022){\n    year_url&lt;-paste(yr,'/',sep='')\n    }else{stop()\n      }\n  middle_base_url&lt;-\"acs/acs1/pums?\"\n  get_start_url&lt;-\"get=\"\n  vec&lt;-'PWGTP'\n  if (AGEP) {\n    vec &lt;- c(vec,'AGEP')\n    }\n  if (GASP) {\n    vec &lt;- c(vec,'GASP')\n    }\n  if (SEX){\n    vec&lt;-c(vec,'SEX')\n    }\n  if (GRPIP){\n    vec&lt;-c(vec,'GRPIP')\n    }\n  if (JWAP){\n    vec&lt;-c(vec,'JWAP')\n    }\n  if (JWDP){\n    vec&lt;-c(vec,'JWDP')\n    }\n  if (JWMNP){\n    vec&lt;-c(vec,'JWMNP')\n    }\n  if (FER){\n    vec&lt;-c(vec,'FER')\n    }\n  if (HHL){\n    vec&lt;-c(vec,'HHL')\n    }\n  if (HISPEED){\n    vec&lt;-c(vec,'HISPEED')\n    }\n  if (SCH){\n    vec&lt;-c(vec,'SCH')\n    }\n  if (SCHL){\n    vec&lt;-c(vec,'SCHL')\n    }\n  if (JWTRNS){\n    vec&lt;-c(vec,'JWTRNS')\n    }\n  if (\"AGEP\" %in% vec | \"GASP\" %in% vec| \"GRPIP\" %in% vec| \"JWAP\" %in% vec| \"JWDP\" %in% vec| \"JWMNP\" %in% vec) {\n    vec&lt;-vec  \n    } else {\n    stop()\n    }\n  if (\"SEX\" %in% vec | \"FER\" %in% vec| \"HHL\" %in% vec| \"HISPEED\" %in% vec| \"JWTRNS\" %in% vec| \"SCH\" %in% vec| \"SCHL\" %in% vec) {\n    vec&lt;-vec  \n    } else {\n    stop()\n    }\n  vars_url&lt;-paste0(vec[-2],collapse = ',')\n  get_end_url&lt;-paste('&',vec[2],sep='')\n  for_url&lt;-\"&for=\"\n  if (geography =='division') {\n    geo&lt;-'division'\n    }\n  if (geography =='region') {\n    geo&lt;-'region'\n    }\n  if (geography =='state') {\n    geo&lt;-'state'\n    }\n  if (geography =='all') {\n    geo_url&lt;-''\n    for_url&lt;-''\n  }\n  if(geo_code==''){\n    geo_url&lt;-paste(geo,'*',sep=':')\n  }\n  else{\n    geo_url&lt;-paste(geo,geo_code,sep=':')\n    }\n  url_pums&lt;-paste0(base_url, year_url, middle_base_url, get_start_url, vars_url,        \n                   get_end_url,for_url,geo_url)\n  \n  # The second part of the function applies formats to the tibble created\n    # The data is converted to a tibble using the first helper function\n    # Numeric variables are converted to numeric values\n    # Time variables are converted to time values\n    # Character variables are converted from their numeric form to their character form using second helper function\n  \n  final&lt;-cens_tibble(url_pums)\n  final$PWGTP&lt;-as.numeric(final$PWGTP)\n  if(AGEP){\n    final$AGEP&lt;-as.numeric(final$AGEP)\n    }\n  if(GASP){\n    final$GASP&lt;-as.numeric(final$GASP)\n    }\n  if(GRPIP){\n    final$GRPIP&lt;-as.numeric(final$GRPIP)\n    }\n  if(JWMNP){\n    final$JWMNP&lt;-as.numeric(final$JWMNP)\n    }\n  if (JWAP){\n    temp &lt;- httr::GET(\"https://api.census.gov/data/2022/acs/acs1/pums/variables/JWAP.json\")\n    temp_list &lt;- temp$content |&gt; \n      rawToChar() |&gt;\n      jsonlite::fromJSON()\n    JWAP &lt;- temp_list$values$item\n    JWAP_values &lt;- JWAP[sort(names(JWAP))]\n    x&lt;-as_tibble(JWAP_values)\n    x2&lt;-pivot_longer(x[,-1],cols = 1:285) |&gt;\n      separate_wider_delim(cols=value,delim='to', names = c('start','end'))|&gt;\n      mutate(ap=ifelse(grepl('a',start),'a.m.','p.m.'))|&gt;\n      mutate(start=str_remove_all(start,\"[apm.]\"),end=str_remove_all(end,\"[apm.]\"))|&gt;\n      separate_wider_delim(cols=start,delim=':', names = c('hour','min'))|&gt;\n      separate_wider_delim(cols=end,delim=':', names = c('hour2','min2'))|&gt;\n      mutate(mid=(as.numeric(min2)+as.numeric(min))/2)|&gt;\n      mutate(mid=as.character(format(round(as.numeric(mid),2))))|&gt;\n      separate_wider_delim(cols=mid,delim='.', names = c('minn','sec'))|&gt;\n      unite(col='timez',hour,minn,sec,sep=\":\")|&gt;\n      mutate(timez=hms::parse_hms(timez))|&gt;\n      unite(col=time,timez,ap,sep=' ')|&gt;\n      select(name,time)\n  final&lt;-left_join(final,x2,by=join_by(JWAP==name))|&gt;\n    select(-JWAP)|&gt;\n    mutate(time=ifelse(is.na(time),'N/A (not a worker; worker who worked from home)', \n                       time))|&gt;\n    rename(\"JWAP\"=\"time\")\n   }\n  if (JWDP){\n    temp &lt;- httr::GET(\"https://api.census.gov/data/2022/acs/acs1/pums/variables/JWDP.json\")\n    temp_list &lt;- temp$content |&gt; \n      rawToChar() |&gt;\n      jsonlite::fromJSON()\n    JWDP &lt;- temp_list$values$item\n    JWDP_values &lt;- JWDP[sort(names(JWDP))]\n    x&lt;-as_tibble(JWDP_values)\n    x2&lt;-pivot_longer(x[,-1],cols = 1:150) |&gt;\n      separate_wider_delim(cols=value,delim='to', names = c('start','end'))|&gt;\n      mutate(ap=ifelse(grepl('a',start),'a.m.','p.m.'))|&gt;\n      mutate(start=str_remove_all(start,\"[apm.]\"),end=str_remove_all(end,\"[apm.]\"))|&gt;\n      separate_wider_delim(cols=start,delim=':', names = c('hour','min'))|&gt;\n      separate_wider_delim(cols=end,delim=':', names = c('hour2','min2'))|&gt;\n      mutate(mid=(as.numeric(min2)+as.numeric(min))/2)|&gt;\n      mutate(mid=as.character(format(round(as.numeric(mid),2))))|&gt;\n      separate_wider_delim(cols=mid,delim='.', names = c('minn','sec'))|&gt;\n      unite(col='timez',hour,minn,sec,sep=\":\")|&gt;\n      mutate(timez=hms::parse_hms(timez))|&gt;\n      unite(col=time,timez,ap,sep=' ')|&gt;\n      select(name,time)\n  final&lt;-left_join(final,x2,by=join_by(JWDP==name))|&gt;\n    select(-JWDP)|&gt;\n    mutate(time=ifelse(is.na(time),'N/A (not a worker; worker who worked from home)', \n                       time))|&gt;\n    rename(\"JWDP\"=\"time\")\n   }\n  if(FER){\n    fmt_FER&lt;-frmt_char_var('FER')\n    final&lt;-left_join(final,fmt_FER,by=join_by(FER==name))|&gt;\n      select(-FER)|&gt;\n      rename(\"FER\"=\"value\")\n    }\n  if(HHL){\n    fmt_HHL&lt;-frmt_char_var('HHL')\n    final&lt;-left_join(final,fmt_HHL,by=join_by(HHL==name))|&gt;\n      select(-HHL)|&gt;\n      rename(\"HHL\"=\"value\")\n    }\n  if(HISPEED){\n    fmt_HISPEED&lt;-frmt_char_var('HISPEED')\n    final&lt;-left_join(final,fmt_HISPEED,by=join_by(HISPEED==name))|&gt;\n      select(-HISPEED)|&gt;\n      rename(\"HISPEED\"=\"value\")\n    }\n  if(JWTRNS){\n    fmt_JWTRNS&lt;-frmt_char_var('JWTRNS')\n    final&lt;-left_join(final,fmt_JWTRNS,by=join_by(JWTRNS==name))|&gt;\n      select(-JWTRNS)|&gt;\n      rename(\"JWTRNS\"=\"value\")\n    }\n  if(SCH){\n    fmt_SCH&lt;-frmt_char_var('SCH')\n    final&lt;-left_join(final,fmt_SCH,by=join_by(SCH==name))|&gt;\n      select(-SCH)|&gt;\n      rename(\"SCH\"=\"value\")\n    }\n  if(SCHL){\n    fmt_SCHL&lt;-frmt_char_var('SCHL')\n    final&lt;-left_join(final,fmt_SCHL,by=join_by(SCHL==name))|&gt;\n      select(-SCHL)|&gt;\n      rename(\"SCHL\"=\"value\")\n    }\n  if(SEX){\n    fmt_SEX&lt;-frmt_char_var('SEX')\n    final&lt;-left_join(final,fmt_SEX,by=join_by(SEX==name))|&gt;\n      select(-SEX)|&gt;\n      rename(\"SEX\"=\"value\")\n    }\n  return(final)\n}\n\nSuppose a user wants to obtain multiple years of data for a given set of variables. The following function will call the query for a list of years specified as a vector of numeric values. Because there is no PUMS data available for 2020, this function will also skip that year if a user includes it in the list.\n\npums_years &lt;- function(yr_list,AGEP=TRUE,GASP=FALSE,GRPIP=FALSE, JWAP=FALSE ,JWDP=FALSE, \n                       JWMNP=FALSE ,FER=FALSE ,HHL=FALSE, HISPEED=FALSE, JWTRNS=FALSE, \n                       SCH=FALSE, SCHL=FALSE, SEX=TRUE, geography='state', geo_code=06) {\n  yr_len &lt;- length(yr_list)\n\n  for(i in 1:yr_len){\n    yr_i &lt;- yr_list[i]\n    \n    # Check to see if 2020 was included and skip if necessary\n    if (yr_i == 2020) {\n      print(\"Skipping 2020 - not available\")\n      next\n    }\n    \n    # Get data for the specified year and append a year variable\n    yr_tib &lt;- get_PUMS_API(yr=yr_i,AGEP,GASP,GRPIP, JWAP ,JWDP, \n                       JWMNP ,FER ,HHL, HISPEED, JWTRNS, \n                       SCH, SCHL, SEX,geography,geo_code) |&gt; mutate(year=yr_i)\n    \n    # Start or append the cumulative results tibble\n        if (i == 1) {\n      pums_combined &lt;- yr_tib  \n    } else {\n      pums_combined &lt;- bind_rows(pums_combined,yr_tib)\n    }\n  }\n  \n  return(pums_combined)\n}"
  },
  {
    "objectID": "558_Project_1.html#summary-statistics",
    "href": "558_Project_1.html#summary-statistics",
    "title": "ST 558 Project 1",
    "section": "Summary statistics",
    "text": "Summary statistics\nWe previously created a class called census for tibbles generated from PUMS data queries. Now, we’ll create a custom summary function for tibbles of this class to produce means and standard deviations for selected numeric variables and frequency tables for specified categorical variables.\nThe variables to be analyzed will be passed to the summary function as a vector of variable names. If no variables for a given type (numeric or character) are specified, then all variables of that type will be summarized by default.\n\nsummary.census &lt;- function(cens_tibble,num_vars,cat_vars){\n\n  # Summarize numeric variables\n  \n  # Extract the weights\n  weight &lt;- cens_tibble$PWGTP\n  \n  # Check to see if a list of numeric variables has been specified.\n  # If not, include all numeric variables except for PWGTP and year\n  if (missing(num_vars)) {\n    num_vars &lt;- names(cens_tibble |&gt; select(where(is.numeric) & !PWGTP))\n  } \n  \n  # Subset the tibble to include the numeric variables   \n  num_tibble &lt;- cens_tibble |&gt; select(all_of(num_vars))\n  mean_t &lt;- colSums(num_tibble*weight)/sum(weight)\n  sd_t &lt;- sqrt(colSums((num_tibble ^ 2) * weight)/sum(weight) - mean_t^2)\n  \n  \n  #Summarize categorical variables\n  # Check to see if a list of categorical variables has been specified.\n  # If not, include all numeric variables except for PWGTP and year\n  if (missing(cat_vars)) {\n    cat_vars &lt;- names(cens_tibble |&gt; select(where(is.character)))\n  } \n  \n  # Subset the tibble to include only the categorical variables   \n  cat_tibble &lt;- cens_tibble |&gt; select(any_of(cat_vars),PWGTP)\n  \n  # Generate weighted counts for each variable\n  count_t &lt;- vector(mode=\"list\")\n  for (i in 1:length(cat_vars)) {\n    count_t[[i]] &lt;- cat_tibble |&gt; group_by(cat_tibble[ ,i]) |&gt; summarize(weighted_count=sum(PWGTP))\n  }\n\n  final &lt;- as.list(c(mean=mean_t,sd=sd_t,count=count_t))\n  return(final)\n\n}"
  },
  {
    "objectID": "558_Project_1.html#creating-box-plots",
    "href": "558_Project_1.html#creating-box-plots",
    "title": "ST 558 Project 1",
    "section": "Creating box plots",
    "text": "Creating box plots\nFinally, we create a function that allows us to generate a box plot for a specified numeric variable, grouped by the levels of a specified categorical variable:\n\nplot.census &lt;- function(cens_tibble,num_var,cat_var) {\n  ggplot(cens_tibble,aes(x=get(cat_var), y=get(num_var), weight=PWGTP)) + geom_boxplot() + xlab(cat_var) + ylab(num_var) + scale_x_discrete(guide = guide_axis(n.dodge=3))\n\n}"
  },
  {
    "objectID": "558_Project_1.html#testing-our-functions",
    "href": "558_Project_1.html#testing-our-functions",
    "title": "ST 558 Project 1",
    "section": "Testing our functions",
    "text": "Testing our functions\nLet’s say we wanted to explore age and school enrollment, just for the year 2019, in the Northeast region (geo_code = 01). We’ll call our API function, get_PUMS_API, for the year 2019 and specify that the variable for school enrollment (SCH) should be included and that the default variable SEX should be excluded:\n\n    our_PUMS_data_1&lt;-get_PUMS_API(yr=2019, SCH=TRUE, SEX=FALSE, geography = 'region',geo_code = 01)\n\n    our_PUMS_data_1\n\n# A tibble: 566,977 × 4\n   PWGTP  AGEP region SCH                                          \n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                                        \n 1    10    85 1      No, has not attended in the last 3 months    \n 2    11    16 1      Yes, public school or public college         \n 3    33    71 1      No, has not attended in the last 3 months    \n 4    80    19 1      Yes, private school or college or home school\n 5    37    83 1      No, has not attended in the last 3 months    \n 6    77    60 1      No, has not attended in the last 3 months    \n 7    78    18 1      Yes, public school or public college         \n 8    71    79 1      No, has not attended in the last 3 months    \n 9    17    20 1      Yes, public school or public college         \n10    73    20 1      Yes, public school or public college         \n# ℹ 566,967 more rows\n\n\nWe can now calculate summary statistics for age and school enrollment for 2019:\n\nsum_2019 &lt;- summary.census(cens_tibble=our_PUMS_data_1,num_var=\"AGEP\",cat_var=\"SCH\")\n\nsum_2019\n\n$mean.AGEP\n[1] 40.35198\n\n$sd.AGEP\n[1] 23.34157\n\n$count\n# A tibble: 4 × 2\n  SCH                                           weighted_count\n  &lt;chr&gt;                                                  &lt;dbl&gt;\n1 N/A (less than 3 years old)                          1782558\n2 No, has not attended in the last 3 months           40976184\n3 Yes, private school or college or home school        3054135\n4 Yes, public school or public college                10169926\n\n\nThe results show that the mean age is about 40.4 years, with a standard deviation of 23.3 years. We can then create a box plot for age, grouped by level of school enrollment. We also see that most people have not attended school in the last 3 months. Next, let’s look at the distribution of ages by school enrollment status:\n\nplot.census(cens_tibble=our_PUMS_data_1,num_var=\"AGEP\",cat_var=\"SCH\")\n\nWarning in rq.fit.br(wx, wy, tau = tau, ...): Solution may be nonunique\n\n\n\n\n\n\n\n\n\nThe box plot indicates, not surprisingly, that the median age of those who have not been enrolled in school for the past 3 months is around 50 years, while those who have been enrolled in school have a median age of less than 25. Even so, we see that some people have been recently enrolled up to ages approaching 100.\nNow suppose we want to know about age and school enrollment in the Northeast region in the years 2017, 2018, and 2022. We’ll use our multi-year function, pums_years, to call the AGEP variable and SCH and set the geography to “region” and the geography code to “1” (Northeast). We’ll also provide it with the list of years.\n\nour_PUMS_data_2 &lt;- pums_years(yr_list=c(2017,2018,2022),AGEP=TRUE, SCH=TRUE, SEX=FALSE, geography='region',geo_code= 01)\n\nour_PUMS_data_2\n\n# A tibble: 1,711,878 × 5\n   PWGTP  AGEP region SCH                                        year\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                                     &lt;dbl&gt;\n 1    55    34 1      No, has not attended in the last 3 months  2017\n 2    56    34 1      No, has not attended in the last 3 months  2017\n 3    48    10 1      Yes, public school or public college       2017\n 4    51     5 1      Yes, public school or public college       2017\n 5    72    76 1      No, has not attended in the last 3 months  2017\n 6    69    74 1      No, has not attended in the last 3 months  2017\n 7    77    53 1      No, has not attended in the last 3 months  2017\n 8    97    51 1      No, has not attended in the last 3 months  2017\n 9    84    26 1      No, has not attended in the last 3 months  2017\n10    88    22 1      Yes, public school or public college       2017\n# ℹ 1,711,868 more rows\n\n\nWe’ll check the summary statistics for age and school enrollment for all three of these years together:\n\nsum_2017_18_22 &lt;- summary.census(cens_tibble=our_PUMS_data_2,num_var=\"AGEP\",cat_var=\"SCH\")\n\nsum_2017_18_22\n\n$mean.AGEP\n[1] 40.27382\n\n$sd.AGEP\n[1] 23.28331\n\n$count\n# A tibble: 4 × 2\n  SCH                                           weighted_count\n  &lt;chr&gt;                                                  &lt;dbl&gt;\n1 N/A (less than 3 years old)                          5361638\n2 No, has not attended in the last 3 months          124111433\n3 Yes, private school or college or home school        9329585\n4 Yes, public school or public college                30819410\n\n\nWe see that the average age across all of these years is about the same as it was for 2019, with similar variability."
  }
]
[
  {
    "objectID": "558_Project_1.html",
    "href": "558_Project_1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "First, we’ll create a helper function that will process the raw data retrived from the API into a tibble. This function also adds a new class called census for this tibble, and we will use this class for summarizing the data later.\n\ncens_tibble &lt;- function(rawdata) {\n  pums_tib &lt;- as_tibble(rawdata)\n  \n  class(pums_tib) &lt;- c(\"census\",class(pums_tib))\n  \n  return(pums_tib)\n}\n\n\n\n\nurl_pums&lt;-\"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,AGEP&SCHL=04&for=state:6\"\nraw&lt;-httr::GET(url_pums)\nstr(raw,max.level=1)\n\nList of 10\n $ url        : chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,AGEP&SCHL=04&for=state:6\"\n $ status_code: int 200\n $ headers    :List of 12\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    1 obs. of  7 variables:\n $ content    : raw [1:104537] 5b 5b 22 53 ...\n $ date       : POSIXct[1:1], format: \"2024-09-29 21:37:56\"\n $ times      : Named num [1:6] 0 0.00164 0.05912 0.18512 0.47024 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\nparsed&lt;-fromJSON(rawToChar(raw$content))\ninfo&lt;-as_tibble(parsed[-1,])\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\nSuppose a user wants to obtain multiple years of data for a given set of variables. The following function will call the query for a list of years specified as a vector:\n\npums_years &lt;- function(yr_list) {\n\n}"
  },
  {
    "objectID": "558_Project_1.html#get-pums-data-from-census-api-for-a-single-year",
    "href": "558_Project_1.html#get-pums-data-from-census-api-for-a-single-year",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "url_pums&lt;-\"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,AGEP&SCHL=04&for=state:6\"\nraw&lt;-httr::GET(url_pums)\nstr(raw,max.level=1)\n\nList of 10\n $ url        : chr \"https://api.census.gov/data/2022/acs/acs1/pums?get=SEX,PWGTP,AGEP&SCHL=04&for=state:6\"\n $ status_code: int 200\n $ headers    :List of 12\n  ..- attr(*, \"class\")= chr [1:2] \"insensitive\" \"list\"\n $ all_headers:List of 1\n $ cookies    :'data.frame':    1 obs. of  7 variables:\n $ content    : raw [1:104537] 5b 5b 22 53 ...\n $ date       : POSIXct[1:1], format: \"2024-09-29 21:37:56\"\n $ times      : Named num [1:6] 0 0.00164 0.05912 0.18512 0.47024 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ request    :List of 7\n  ..- attr(*, \"class\")= chr \"request\"\n $ handle     :Class 'curl_handle' &lt;externalptr&gt; \n - attr(*, \"class\")= chr \"response\"\n\nparsed&lt;-fromJSON(rawToChar(raw$content))\ninfo&lt;-as_tibble(parsed[-1,])\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\n\nSuppose a user wants to obtain multiple years of data for a given set of variables. The following function will call the query for a list of years specified as a vector:\n\npums_years &lt;- function(yr_list) {\n\n}"
  },
  {
    "objectID": "558_Project_1.html#summary-statistics",
    "href": "558_Project_1.html#summary-statistics",
    "title": "ST 558 Project 1",
    "section": "Summary statistics",
    "text": "Summary statistics\nWe previously created a class called census for tibbles generated from PUMS data queriers. We now create a custom summary function for tibbles of this class to produce means and standard deviations for selected numeric variables:\n\nsummary.census &lt;- function(cens_tibble,num_vars,cat_vars){\n  \n}"
  },
  {
    "objectID": "558_Project_1.html#creating-box-plots",
    "href": "558_Project_1.html#creating-box-plots",
    "title": "ST 558 Project 1",
    "section": "Creating box plots",
    "text": "Creating box plots\nFinally, we create a function that allows us to generate a box plot for a specified numeric variable, grouped by the levels of a specified categorical variable:\n\nplot.census &lt;- function(cens_tibble,num_var,cat_var) {\n  ggplot(cens_tibble,aes(x=get(cat_var), y=get(num_var), weight=PWGTP)) + geom_boxplot()\n\n}"
  }
]